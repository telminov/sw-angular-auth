(function() {
  angular.module('swAuth').provider('authConfigProvider', function() {
    var config;
    config = {
      systemLabel: 'System Label',
      serverAddress: '/server_url',
      serverLoginUrl: '/login/',
      serverLogoutUrl: '/logout/',
      serverUserInfoUrl: '/current_user/',
      serverCSRFUrl: '/get_csrf/',
      appLoginUrl: '/login/'
    };
    return {
      $get: function() {
        return {
          getSystemLabel: function() {
            return config.systemLabel;
          },
          getServerAddress: function() {
            return config.serverAddress;
          },
          getServerLoginUrl: function() {
            return config.serverLoginUrl;
          },
          getServerLogoutUrl: function() {
            return config.serverLogoutUrl;
          },
          getServerUserInfoUrl: function() {
            return config.serverUserInfoUrl;
          },
          getServerCSRFUrl: function() {
            return config.serverCSRFUrl;
          },
          getAppLoginUrl: function() {
            return config.appLoginUrl;
          }
        };
      },
      setSystemLabel: function(label) {
        return config.systemLabel = label;
      },
      setServerAddress: function(address) {
        return config.serverAddress = address;
      },
      setServerLoginUrl: function(url) {
        return config.serverLoginUrl = url;
      },
      setServerLogoutUrl: function(url) {
        return config.serverLogoutUrl = url;
      },
      setServerUserInfoUrl: function(url) {
        return config.serverUserInfoUrl = url;
      },
      setServerCSRFUrl: function(url) {
        return config.serverCSRFUrl = url;
      },
      setAppLoginUrl: function(url) {
        return config.appLoginUrl = url;
      }
    };
  });

}).call(this);

(function() {
  angular.module('swAuth', ['ngCookies', 'ngRoute']).constant('AUTH_UPDATE_USER', 'sw_auth_service_update_user').constant('AUTH_SERVER_REJECT', 'sw_auth_service_server_401_or_403_reject').config(function($httpProvider) {
    return $httpProvider.responseInterceptors.push('securityInterceptor');
  }).provider('securityInterceptor', function() {
    return {
      $get: function($location, $q, $rootScope, AUTH_SERVER_REJECT) {
        return function(promise) {
          return promise.then(null, function(response) {
            if (response.status === 401 || response.status === 403) {
              $rootScope.$broadcast(AUTH_SERVER_REJECT, response.status, response.data);
            }
            return $q.reject(response);
          });
        };
      }
    };
  }).run(function($rootScope, $location, auth, AUTH_UPDATE_USER, AUTH_SERVER_REJECT) {
    $rootScope.$on('$routeChangeStart', function(scope, next, current) {
      var loginUrl, nextPath, ref;
      nextPath = '';
      if (next != null ? (ref = next.$$route) != null ? ref.originalPath : void 0 : void 0) {
        nextPath = next.$$route.originalPath;
      }
      if (!auth.isAuthenticated()) {
        loginUrl = auth.getLoginUrl();
        if (loginUrl === nextPath) {
          return;
        }
        return $location.path(loginUrl);
      }
    });
    return $rootScope.$on(AUTH_SERVER_REJECT, function(event, server_status) {
      auth.clearCurrentUser();
      return $location.path(auth.getLoginUrl());
    });
  });

}).call(this);

(function() {
  angular.module('swAuth').service('auth', function($http, $rootScope, $cookieStore, authConfig, AUTH_UPDATE_USER) {
    var auth;
    auth = this;
    auth.getUser = function() {
      return $cookieStore.get('user');
    };
    auth.setUser = function(newUserData) {
      var oldUserData;
      oldUserData = auth.getUser();
      $cookieStore.put('user', newUserData);
      return $rootScope.$broadcast(AUTH_UPDATE_USER, newUserData, oldUserData);
    };
    auth.isAuthenticated = function(userData) {
      var user;
      user = userData || auth.getUser();
      return (user != null ? user.isAuthenticated : void 0) || false;
    };
    auth.getName = function(userData) {
      var user;
      user = userData || auth.getUser();
      return user != null ? user.username : void 0;
    };
    auth.getLoginUrl = function() {
      return authConfig.getAppLoginUrl();
    };
    auth.getCSRF = function() {
      var csrfUrl;
      csrfUrl = authConfig.getServerCSRFUrl();
      return $http.get(csrfUrl).then(function(response) {
        return response.data;
      });
    };
    auth.login = function(username, password, makePostSubmit) {
      var csrfPromise, loginPromise;
      csrfPromise = auth.getCSRF();
      loginPromise = csrfPromise.then(function(csrf) {
        var loginUrl;
        loginUrl = authConfig.getServerLoginUrl();
        return loginPromise = $http({
          method: "POST",
          url: loginUrl,
          data: {
            csrfmiddlewaretoken: csrf,
            username: username,
            password: password
          },
          withCredentials: true
        });
      });
      loginPromise = loginPromise.then(function() {
        var userPromise;
        userPromise = auth.getCurrentUser();
        if (makePostSubmit) {
          userPromise.then(function() {
            var form;
            form = $("<form method='POST' action='" + loginUrl + "'><input name='username'><input name='password'></form>");
            form.find('[name=username]').val(username);
            form.find('[name=password]').val(password);
            return form.submit();
          });
        }
        return userPromise;
      });
      return loginPromise;
    };
    auth.getCurrentUser = function() {
      var userPromise;
      userPromise = $http({
        method: "GET",
        url: authConfig.getServerUserInfoUrl(),
        withCredentials: true
      });
      userPromise = userPromise.then(function(response) {
        var newUserData;
        newUserData = response.data;
        auth.setUser(newUserData);
        return newUserData;
      });
      return userPromise;
    };
    auth.clearCurrentUser = function() {
      var newUserData;
      newUserData = {};
      return auth.setUser(newUserData);
    };
    auth.logout = function() {
      var logoutPromise;
      logoutPromise = $http({
        method: "POST",
        url: authConfig.getServerLogoutUrl(),
        withCredentials: true
      });
      logoutPromise.then(function() {
        return auth.clearCurrentUser();
      });
      return logoutPromise;
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,