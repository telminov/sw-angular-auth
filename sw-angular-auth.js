(function() {
  var indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  angular.module('swAuth', ['ngCookies', 'ngRoute']).constant('AUTH_UPDATE_USER', 'sw_auth_service_update_user').constant('AUTH_SERVER_REJECT', 'sw_auth_service_server_401_or_403_reject').config(function($httpProvider) {
    return $httpProvider.interceptors.push('authInterceptor');
  }).factory('authInterceptor', function($location, $q, $rootScope, AUTH_SERVER_REJECT) {
    return {
      responseError: function(response) {
        if ((response != null ? response.status : void 0) === 401 || (response != null ? response.status : void 0) === 403) {
          $rootScope.$broadcast(AUTH_SERVER_REJECT, response.status, response.data);
        }
        return $q.reject(response);
      }
    };
  }).run(function($rootScope, $location, auth, authConfig, AUTH_UPDATE_USER, AUTH_SERVER_REJECT) {
    $rootScope.$on('$routeChangeStart', function(scope, next, current) {
      var loginUrl, nextPath, ref;
      nextPath = '';
      if (next != null ? (ref = next.$$route) != null ? ref.originalPath : void 0 : void 0) {
        nextPath = next.$$route.originalPath;
      }
      if (!auth.isAuthenticated() && indexOf.call(authConfig.getFreeUrls(), nextPath) < 0) {
        loginUrl = auth.getLoginUrl();
        if (loginUrl === nextPath) {
          return;
        }
        return $location.path(loginUrl);
      }
    });
    return $rootScope.$on(AUTH_SERVER_REJECT, function(event, server_status) {
      auth.clearCurrentUser();
      return $location.path(auth.getLoginUrl());
    });
  });

}).call(this);

(function() {
  angular.module('swAuth').provider('authConfig', function() {
    var config;
    config = {
      systemLabel: 'System Label',
      serverAddress: '/server_url',
      serverLoginUrl: '/api/auth/login/',
      serverLogoutUrl: '/api/auth/logout/',
      serverUserInfoUrl: '/api/auth/current_user/',
      serverCSRFUrl: '/api/auth/get_csrf/',
      appLoginUrl: '/login/',
      freeUrls: []
    };
    return {
      $get: function() {
        return {
          getSystemLabel: function() {
            return config.systemLabel;
          },
          getServerAddress: function() {
            return config.serverAddress;
          },
          getServerLoginUrl: function() {
            return config.serverAddress + config.serverLoginUrl;
          },
          getServerLogoutUrl: function() {
            return config.serverAddress + config.serverLogoutUrl;
          },
          getServerUserInfoUrl: function() {
            return config.serverAddress + config.serverUserInfoUrl;
          },
          getServerCSRFUrl: function() {
            return config.serverAddress + config.serverCSRFUrl;
          },
          getAppLoginUrl: function() {
            return config.appLoginUrl;
          },
          getFreeUrls: function() {
            return config.freeUrls;
          }
        };
      },
      setSystemLabel: function(label) {
        return config.systemLabel = label;
      },
      setServerAddress: function(address) {
        return config.serverAddress = address;
      },
      setServerLoginUrl: function(url) {
        return config.serverLoginUrl = url;
      },
      setServerLogoutUrl: function(url) {
        return config.serverLogoutUrl = url;
      },
      setServerUserInfoUrl: function(url) {
        return config.serverUserInfoUrl = url;
      },
      setServerCSRFUrl: function(url) {
        return config.serverCSRFUrl = url;
      },
      setAppLoginUrl: function(url) {
        return config.appLoginUrl = url;
      },
      setFreeUrls: function(freeUrls) {
        return config.freeUrls = freeUrls;
      }
    };
  });

}).call(this);

(function() {
  angular.module('swAuth').service('auth', function($http, $rootScope, $cookieStore, $location, authConfig, AUTH_UPDATE_USER) {
    var auth;
    auth = this;
    auth.getUser = function() {
      return $cookieStore.get('user');
    };
    auth.setUser = function(newUserData) {
      var oldUserData;
      oldUserData = auth.getUser();
      $cookieStore.put('user', newUserData);
      return $rootScope.$broadcast(AUTH_UPDATE_USER, newUserData, oldUserData);
    };
    auth.isAuthenticated = function(userData) {
      var user;
      user = userData || auth.getUser();
      return (user != null ? user.is_authenticated : void 0) || false;
    };
    auth.getName = function(userData) {
      var user;
      user = userData || auth.getUser();
      return user != null ? user.username : void 0;
    };
    auth.getLoginUrl = function() {
      return authConfig.getAppLoginUrl();
    };
    auth.login = function(username, password) {
      var loginPromise, loginUrl;
      loginUrl = authConfig.getServerLoginUrl();
      loginPromise = $http({
        method: "POST",
        url: loginUrl,
        data: $.param({
          username: username,
          password: password
        }),
        withCredentials: true
      });
      loginPromise = loginPromise.then(function() {
        return auth.getCurrentUser();
      });
      return loginPromise;
    };
    auth.getCurrentUser = function() {
      var userPromise;
      userPromise = $http({
        method: "GET",
        url: authConfig.getServerUserInfoUrl(),
        withCredentials: true
      });
      userPromise = userPromise.then(function(response) {
        var newUserData;
        newUserData = response.data;
        auth.setUser(newUserData);
        return newUserData;
      });
      return userPromise;
    };
    auth.clearCurrentUser = function() {
      var newUserData;
      newUserData = {};
      return auth.setUser(newUserData);
    };
    auth.logout = function() {
      var logoutPromise;
      logoutPromise = $http({
        method: "POST",
        url: authConfig.getServerLogoutUrl(),
        withCredentials: true
      });
      logoutPromise.then(function() {
        return auth.clearCurrentUser();
      });
      return logoutPromise;
    };
    auth.isLoginPage = function() {
      return $location.path() === authConfig.getAppLoginUrl();
    };
  });

}).call(this);

(function() {
  angular.module('swAuth').controller('AuthLoginCtrl', function($scope, $location, auth, authConfig) {
    var fail, success;
    $scope.header = authConfig.getSystemLabel();
    success = function() {
      return $location.path('/');
    };
    fail = function(response) {
      var ref;
      return $scope.loginErrors = ((ref = response.data) != null ? ref.errors : void 0) || ['Ошибка аутентификации'];
    };
    return $scope.logIn = function() {
      var loginPromise;
      $scope.loginErrors = void 0;
      loginPromise = auth.login($scope.login, $scope.password);
      return loginPromise.then(success, fail);
    };
  });

}).call(this);

(function() {
  angular.module('swAuth').controller('AuthLogoutCtrl', function($scope, $location, $log, auth, authConfig) {
    $scope.header = authConfig.getSystemLabel();
    $scope.inProcess = true;
    return auth.logout().then(function() {
      $scope.inProcess = false;
      return $location.path('/');
    }, function(response) {
      $scope.inProcess = false;
      $log.error(response);
      return $scope.logoutError = "Logout error";
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,