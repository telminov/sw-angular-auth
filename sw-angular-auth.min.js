(function(){angular.module("swAuth").provider("authConfigProvider",function(){var config;return config={systemLabel:"System Label",serverAddress:"/server_url",serverLoginUrl:"/login/",serverLogoutUrl:"/logout/",serverUserInfoUrl:"/current_user/",serverCSRFUrl:"/get_csrf/",appLoginUrl:"/login/"},{$get:function(){return{getSystemLabel:function(){return config.systemLabel},getServerAddress:function(){return config.serverAddress},getServerLoginUrl:function(){return config.serverLoginUrl},getServerLogoutUrl:function(){return config.serverLogoutUrl},getServerUserInfoUrl:function(){return config.serverUserInfoUrl},getServerCSRFUrl:function(){return config.serverCSRFUrl},getAppLoginUrl:function(){return config.appLoginUrl}}},setSystemLabel:function(label){return config.systemLabel=label},setServerAddress:function(address){return config.serverAddress=address},setServerLoginUrl:function(url){return config.serverLoginUrl=url},setServerLogoutUrl:function(url){return config.serverLogoutUrl=url},setServerUserInfoUrl:function(url){return config.serverUserInfoUrl=url},setServerCSRFUrl:function(url){return config.serverCSRFUrl=url},setAppLoginUrl:function(url){return config.appLoginUrl=url}}})}).call(this),function(){angular.module("swAuth",["ngCookies","ngRoute"]).constant("AUTH_UPDATE_USER","sw_auth_service_update_user").constant("AUTH_SERVER_REJECT","sw_auth_service_server_401_or_403_reject").config(function($httpProvider){return $httpProvider.responseInterceptors.push("securityInterceptor")}).provider("securityInterceptor",function(){return{$get:function($location,$q,$rootScope,AUTH_SERVER_REJECT){return function(promise){return promise.then(null,function(response){return(401===response.status||403===response.status)&&$rootScope.$broadcast(AUTH_SERVER_REJECT,response.status,response.data),$q.reject(response)})}}}}).run(function($rootScope,$location,auth,AUTH_UPDATE_USER,AUTH_SERVER_REJECT){return $rootScope.$on("$routeChangeStart",function(scope,next){var loginUrl,nextPath,ref;if(nextPath="",(null!=next&&null!=(ref=next.$$route)?ref.originalPath:void 0)&&(nextPath=next.$$route.originalPath),!auth.isAuthenticated()){if(loginUrl=auth.getLoginUrl(),loginUrl===nextPath)return;return $location.path(loginUrl)}}),$rootScope.$on(AUTH_SERVER_REJECT,function(){return auth.clearCurrentUser(),$location.path(auth.getLoginUrl())})})}.call(this),function(){angular.module("swAuth").service("auth",function($http,$rootScope,$cookieStore,authConfig,AUTH_UPDATE_USER){var auth;auth=this,auth.getUser=function(){return $cookieStore.get("user")},auth.setUser=function(newUserData){var oldUserData;return oldUserData=auth.getUser(),$cookieStore.put("user",newUserData),$rootScope.$broadcast(AUTH_UPDATE_USER,newUserData,oldUserData)},auth.isAuthenticated=function(userData){var user;return user=userData||auth.getUser(),(null!=user?user.isAuthenticated:void 0)||!1},auth.getName=function(userData){var user;return user=userData||auth.getUser(),null!=user?user.username:void 0},auth.getLoginUrl=function(){return authConfig.getAppLoginUrl()},auth.getCSRF=function(){var csrfUrl;return csrfUrl=authConfig.getServerCSRFUrl(),$http.get(csrfUrl).then(function(response){return response.data})},auth.login=function(username,password,makePostSubmit){var csrfPromise,loginPromise;return csrfPromise=auth.getCSRF(),loginPromise=csrfPromise.then(function(csrf){var loginUrl;return loginUrl=authConfig.getServerLoginUrl(),loginPromise=$http({method:"POST",url:loginUrl,data:{csrfmiddlewaretoken:csrf,username:username,password:password},withCredentials:!0})}),loginPromise=loginPromise.then(function(){var userPromise;return userPromise=auth.getCurrentUser(),makePostSubmit&&userPromise.then(function(){var form;return form=$("<form method='POST' action='"+loginUrl+"'><input name='username'><input name='password'></form>"),form.find("[name=username]").val(username),form.find("[name=password]").val(password),form.submit()}),userPromise})},auth.getCurrentUser=function(){var userPromise;return userPromise=$http({method:"GET",url:authConfig.getServerUserInfoUrl(),withCredentials:!0}),userPromise=userPromise.then(function(response){var newUserData;return newUserData=response.data,auth.setUser(newUserData),newUserData})},auth.clearCurrentUser=function(){var newUserData;return newUserData={},auth.setUser(newUserData)},auth.logout=function(){var logoutPromise;return logoutPromise=$http({method:"POST",url:authConfig.getServerLogoutUrl(),withCredentials:!0}),logoutPromise.then(function(){return auth.clearCurrentUser()}),logoutPromise}})}.call(this);